@page "/auctions/{Id:long}"
@using Wallymathieu.Auctions.Commands
@inject IAuctionRepository Repository
@inject ICreateBidCommandHandler CreateBidCommandHandler

<PageTitle>Auction</PageTitle>

<h1>Auction</h1>

<p>This page display an auction.</p>

@if (auction == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Starts at</th>
            <th>Expires at</th>
            <th>Title</th>
            <th>Seller</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@auction.StartsAt.Date.ToShortDateString()</td>
            <td>@auction.Expiry.Date.ToShortDateString()</td>
            <td>@auction.Title</td>
            <td>@auction.User</td>
        </tr>
        </tbody>
    </table>
    <table class="table">
        <thead>
        <tr>
            <th>Amount</th>
            <th>Bidder</th>
            <th>At</th>
        </tr>
        </thead>
        <tbody>
        @{
            foreach (var bid in auction.Bids)
            {
                <tr>
                    <td>@bid.Amount</td>
                    <td>@bid.User</td>
                    <td>@bid.At.Date.ToShortDateString()</td>
                </tr>
            }
        }
        <tr>
            <td>
                <input placeholder="Amount" type="number" @bind="newBid"/>
            </td>
            <td></td>
            <td>
                <button @onclick="AddBid">Add bid</button>
            </td>
        </tr>
        </tbody>
    </table>
}

@code {

    [Parameter]
    public long Id { get; set; }

    private Auction? auction;
    private string? newBid;

    protected override async Task OnInitializedAsync()
    {
        auction = await Repository.GetAuctionAsync(new AuctionId(this.Id), default);
    }

    private async Task AddBid()
    {
        if (!string.IsNullOrWhiteSpace(newBid) && Int32.TryParse(newBid, out var bid))
        {
            await CreateBidCommandHandler.Handle(new CreateBidCommand(new Amount(bid, auction.Currency), auction.AuctionId), default);
            newBid = string.Empty;
        }
    }

}