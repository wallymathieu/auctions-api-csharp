@page "/auctions/{Id:long}"
@using Wallymathieu.Auctions.Application.Services
@using Wallymathieu.Auctions.Commands
@using Wallymathieu.Auctions.Frontend.Data
@using Wallymathieu.Auctions.Services
@inject IAuctionQuery Query
@inject ICreateBidCommandHandler CreateBidCommandHandler
@inject ISystemClock SystemClock

<PageTitle>Auction</PageTitle>

<h1>Auction</h1>

<p>This page display an auction.</p>

@if (!_auction.Loaded)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (_auction.Data == null)
{
    <p>
        <em>Not found</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Starts at</th>
            <th>Ends at</th>
            <th>Title</th>
            <th>Seller</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@_auction.Data.StartsAt.Date.ToShortDateString()</td>
            <td>@_auction.Data.Expiry.Date.ToShortDateString()</td>
            <td>@_auction.Data.Title</td>
            <td>@_auction.Data.User</td>
        </tr>
        </tbody>
    </table>
    <table class="table">
        <thead>
        <tr>
            <th>Amount</th>
            <th>Bidder</th>
            <th>At</th>
        </tr>
        </thead>
        <tbody>
        @{
            foreach (var bid in _auction.Data.GetBids(SystemClock.Now))
            {
                <tr>
                    <td>@bid.Amount</td>
                    <td>@bid.</td>
                    <td>@bid.At.ToString()</td>
                </tr>
            }
        }
        <tr>
            <td>
                <input placeholder="Amount" type="number" @bind="_newBid"/>
            </td>
            <td>
            </td>
            <td>
                <DisplayError Description="@_errorDescription"/>
                <button @onclick="AddBid">Add bid</button>
            </td>
        </tr>
        </tbody>
    </table>
}

@code {

    [Parameter] public long Id { get; set; }

    private readonly RemoteData<Auction> _auction = new();
    private int? _newBid;
    private string? _errorDescription;

    private async Task LoadAuction()
    {
        var auction = await Query.GetAuctionAsync(new AuctionId(this.Id));
        _auction.OnLoad(
            auction);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAuction();
    }

    private async Task AddBid()
    {
        if (_newBid != null)
        {
            var result = await CreateBidCommandHandler.Handle(new CreateBidCommand(_newBid.Value, _auction.Data.AuctionId));
            result?.Match(_ => { _newBid = null; }, err => { _errorDescription = err.ToString(); });
            if (result?.IsOk ?? false)
            {
                await LoadAuction();
            }
        }
        else
        {
            _errorDescription = Errors.MustSpecifyAmount.ToString();
        }
    }

}